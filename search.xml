<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ruby learning one]]></title>
    <url>%2F2018%2F06%2F19%2FRuby-learning-one%2F</url>
    <content type="text"><![CDATA[Ruby介绍&emsp;&emsp;Ruby 是一种面向对象、命令式、函数式、动态的通用编程语言。在20世纪90年代中期由日本计算机科学家松本行弘（Matz）设计并开发。 &emsp;&emsp;遵守BSD许可证和Ruby License[10][注 1]。它的灵感与特性来自于Perl、Smalltalk、Eiffel、Ada以及Lisp语言。由Ruby语言本身还发展出了JRuby（Java平台）、IronRuby（.NET平台）等其他平台的Ruby语言替代品。—来自WIKI&emsp;&emsp;Ruby 是”程序员的最佳朋友”。 &emsp;&emsp;Ruby 的特性与 Smalltalk、Perl 和 Python 类似。Perl、Python 和 Smalltalk 是脚本语言。Smalltalk 是一个真正的面向对象语言。Ruby，与 Smalltalk 一样，是一个完美的面向对象语言。使用 Ruby 的语法比使用 Smalltalk 的语法要容易得多。 语言特点 Ruby 是开源的，在Web 上免费提供，但需要一个许可证。 [5] Ruby 是一种通用的、解释的编程语言。 Ruby 是一种真正的面向对象编程语言。 Ruby 是一种类似于 Python 和 Perl 的服务器端脚本语言。 Ruby 可以用来编写通用网关接口（CGI）脚本。 Ruby 可以被嵌入到超文本标记语言（HTML）。 Ruby 语法简单，这使得新的开发人员能够快速轻松地学习 Ruby。 Ruby 与 C++ 和 Perl 等许多编程语言有着类似的语法。 Ruby 可扩展性强，用 Ruby 编写的大程序易于维护。 Ruby 可用于开发的 Internet 和 Intranet 应用程序。 Ruby 可以安装在 Windows 和 POSIX 环境中。 Ruby 支持许多 GUI 工具，比如 Tcl/Tk、GTK 和 OpenGL。 Ruby 可以很容易地连接到 DB2、MySQL、Oracle 和 Sybase。 Ruby 有丰富的内置函数，可以直接在 Ruby 脚本中使用。 ---来自百度百科 安装Ruby环境：CentOS [root@www ~]# yum install ruby -yLoaded plugins: fastestmirror, langpacksRepository epel is listed more than once in the configurationRepodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast……….Complete![root@www ~]# ruby -vruby 2.0.0p648 (2015-12-16) [x86_64-linux][root@www ~]#如上所示安装成功 实例脚本式： [root@www ~]# echo “puts ‘hello world’” &gt; test.rb[root@www ~]# ruby test.rbhello world[root@www ~]#交互式： [root@www ~]# irbirb(main):001:0&gt; puts “hello world”hello world=&gt; nilirb(main):002:0&gt; 字符编码#!/usr/bin/ruby -w -- coding: UTF-8 --puts “你好，世界！”; 命令行选项$ ruby [ options ] [.] [ programfile ] [ arguments … ]选项|描述—–|—–-a|与 -n 或 -p 一起使用时，可以打开自动拆分模式(auto split mode)。请查看 -n 和 -p 选项。-c|只检查语法，不执行程序。-C dir|在执行前改变目录（等价于 -X）。-d|启用调试模式（等价于 -debug）。-F pat|指定 pat 作为默认的分离模式（$;）。-e prog|指定 prog 作为程序在命令行中执行。可以指定多个 -e 选项，用来执行多个程序。-h|显示命令行选项的一个概览。-i [ ext]|把文件内容重写为程序输出。原始文件会被加上扩展名 ext 保存下来。如果未指定 ext，原始文件会被删除。-I dir|添加 dir 作为加载库的目录。-K [ kcode]|指定多字节字符集编码。e 或 E 对应 EUC（extended Unix code），s 或 S 对应 SJIS（Shift-JIS），u 或 U 对应 UTF-8，a、A、n 或 N 对应 ASCII。-l|启用自动行尾处理。从输入行取消一个换行符，并向输出行追加一个换行符。-n|把代码放置在一个输入循环中（就像在 while gets; … end 中一样）。-0[ octal]|设置默认的记录分隔符（$/）为八进制。如果未指定 octal 则默认为 \0。-p|把代码放置在一个输入循环中。在每次迭代后输出变量 $_ 的值。-r lib|使用 require 来加载 lib 作为执行前的库。-s|解读程序名称和文件名参数之间的匹配模式 -xxx 的任何参数作为开关，并定义相应的变量。-T [level]|设置安全级别，执行不纯度测试（如果未指定 level，则默认值为 1）。-v|显示版本，并启用冗余模式。-w|启用冗余模式。如果未指定程序文件，则从 STDIN 读取。-x [dir]|删除 #!ruby 行之前的文本。如果指定了 dir，则把目录改变为 dir。-X dir|在执行前改变目录（等价于 -C）。-y|启用解析器调试模式。–copyright|显示版权声明。–debug|启用调试模式（等价于 -d）。–help|显示命令行选项的一个概览（等价于 -h）。–version|显示版本。–verbose|启用冗余模式（等价于 -v）。设置 $VERBOSE 为 true。–yydebug|启用解析器调试模式（等价于 -y）。]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>Learn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM2的安装和使用]]></title>
    <url>%2F2018%2F06%2F19%2FPM2%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[PM2介绍&emsp;&emsp;PM2 is a process manager for the JavaScript runtime Node.js. In 2016, PM2 is ranked as the 82nd most popular JavaScript project on GitHub.&emsp;&emsp;PM2 or Process Manager 2, is an Open Source, production Node.js process manager helping Developers and Devops manage Node.js applications in production environment. In comparison with other process manager like Supervisord, Forever, Systemd, some key features of PM2 are automatic application load balancing, declarative application configuration, deployment system and monitoring.&emsp;&emsp;Started in 2013 by Alexandre Strzelewicz. The code source is hosted on GitHub and installable via Npm (software) “Npm (software)”).说明：本次安装环境为CentOS7上进行 PM2安装1.安装node首先，从Node.js官网下载对应平台的安装程序，网速慢的童鞋请移步国内镜像。 [root@www ~]# tar xf node-v10.3.0-linux-x64.tar.gz [root@www ~]# cd node-v10.3.0-linux-x64/ [root@www node-v10.3.0-linux-x64]# ls bin CHANGELOG.md include lib LICENSE README.md share [root@www node-v10.3.0-linux-x64]# 加入环境变量中： [root@www node-v10.3.0-linux-x64]# echo &quot;export PATH=/usr/local/node-v10.3.0-linux-x64/bin:$PATH&quot; &gt; /etc/profile.d/nodejs.sh [root@www node-v10.3.0-linux-x64]# source /etc/profile [root@www node-v10.3.0-linux-x64]# npm -v 6.1.0 [root@www node-v10.3.0-linux-x64]# 2.安装pm2通过上面node提供的npm进行安装 [root@www ~]# npm install pm2 -g 如图提示说明安装成功 PM2使用start [options] &lt;file|json|stdin|app_name|pm_id...&gt; 后台启动node.js应用 trigger &lt;proc_name&gt; &lt;action_name&gt; [params] 通过此命令触发操作流程？？ deploy &lt;file|environment&gt; 通过环境变量或配置文件发布node.js项目 startOrRestart &lt;json&gt; start or restart JSON file startOrReload &lt;json&gt; start or gracefully reload JSON file pid [app_name] 返回指定app的pid或返回所有的pid startOrGracefulReload &lt;json&gt; start or gracefully reload JSON file stop [options] &lt;id|name|all|json|stdin...&gt; 停止一个进程 (若要重新启动, 执行pm2 restart &lt;app&gt;) restart [options] &lt;id|name|all|json|stdin...&gt; 重启一个进程 scale &lt;app_name&gt; &lt;number&gt; 在集群模式中依赖总数增加或减少集群数量 snapshot snapshot PM2 memory profile &lt;command&gt; CPU的使用情况 reload &lt;name|all&gt; 重新加载进程 (注意这个只针对http/https的应用) gracefulReload &lt;name|all&gt; 优雅地重新加载一个进程. 发送&quot;shutdown&quot; 关闭所有的连接. id &lt;name&gt; 获取app的id delete &lt;name|id|script|all|json|stdin...&gt; 停止次进程并且冲pm2管理列表中删除此进程 sendSignal &lt;signal&gt; &lt;pm2_id|name&gt; 向目标进程发送一个系统signal ping ping pm2的后台进程 - 如果挂了 就重启 updatePM2 使用内存中的PM2更新内存中的 update updatePM2的别名 install|module:install [options] [module|git:/] 安装或者更新模块 (或者是模块的设置) 然后永久运行它 module:update &lt;module|git:/&gt; 更新模块并永久运行 module:generate [app_name] 在当前目录生成一个事例模块 uninstall|module:uninstall &lt;module&gt; 停止并卸载一个模块 publish|module:publish Publish the module you are currently on set [key] [value] sets the specified config &lt;key&gt; &lt;value&gt; multiset &lt;value&gt; multiset eg &quot;key1 val1 key2 val2 get [key] get value for &lt;key&gt; conf [key] [value] get / set module config values config &lt;key&gt; [value] get / set module config values unset &lt;key&gt; clears the specified config &lt;key&gt; report give a full pm2 report for https://github.com/Unitech/pm2/issues link|interact [options] [secret] [public] [name] linking action to keymetrics.io - command can be stop|info|delete|restart unlink linking action to keymetrics.io - command can be stop|info|delete|restart unmonitor [name] unmonitor target process monitor [name] monitor target process open open dashboard in browser register create an account on keymetrics login login to keymetrics and link current PM2 web launch a health API on 0.0.0.0:9615 dump|save dump all processes for resurrecting them later send &lt;pm_id&gt; &lt;line&gt; send stdin to &lt;pm_id&gt; attach &lt;pm_id&gt; [comman] attach stdin/stdout to application identified by &lt;pm_id&gt; resurrect resurrect previously dumped processes unstartup [platform] disable and clear auto startup - [platform]=systemd,upstart,launchd,rcd startup [platform] setup script for pm2 at boot - [platform]=systemd,upstart,launchd,rcd logrotate copy default logrotate configuration ecosystem|init [mode] generate a process conf file. (mode = null or simple) reset &lt;name|id|all&gt; reset counters for process describe &lt;id&gt; describe all parameters of a process id desc &lt;id&gt; (alias) describe all parameters of a process id info &lt;id&gt; (alias) describe all parameters of a process id show &lt;id&gt; (alias) describe all parameters of a process id list|ls list all processes l (alias) list all processes ps (alias) list all processes status (alias) list all processes jlist list all processes in JSON format prettylist print json in a prettified JSON monit launch termcaps monitoring imonit launch legacy termcaps monitoring dashboard|dash launch dashboard with monitoring and logs flush flush logs reloadLogs reload all logs logs [options] [id|name] stream logs file. Default stream all logs kill kill daemon pull &lt;name&gt; [commit_id] updates repository for a given app forward &lt;name&gt; updates repository to the next commit for a given app backward &lt;name&gt; downgrades repository to the previous commit for a given app gc force PM2 to trigger garbage collection deepUpdate performs a deep update of PM2 serve|expose [path] [port] serve a directory over http via port]]></content>
      <categories>
        <category>Server</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
</search>
